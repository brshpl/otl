// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./mocks_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/brshpl/otl/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockOneTimeLink is a mock of OneTimeLink interface.
type MockOneTimeLink struct {
	ctrl     *gomock.Controller
	recorder *MockOneTimeLinkMockRecorder
}

// MockOneTimeLinkMockRecorder is the mock recorder for MockOneTimeLink.
type MockOneTimeLinkMockRecorder struct {
	mock *MockOneTimeLink
}

// NewMockOneTimeLink creates a new mock instance.
func NewMockOneTimeLink(ctrl *gomock.Controller) *MockOneTimeLink {
	mock := &MockOneTimeLink{ctrl: ctrl}
	mock.recorder = &MockOneTimeLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOneTimeLink) EXPECT() *MockOneTimeLinkMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOneTimeLink) Create(ctx context.Context, data string) (entity.OneTimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(entity.OneTimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOneTimeLinkMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOneTimeLink)(nil).Create), ctx, data)
}

// Get mocks base method.
func (m *MockOneTimeLink) Get(ctx context.Context, link string) (entity.OneTimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, link)
	ret0, _ := ret[0].(entity.OneTimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOneTimeLinkMockRecorder) Get(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOneTimeLink)(nil).Get), ctx, link)
}

// MockOneTimeLinkRepo is a mock of OneTimeLinkRepo interface.
type MockOneTimeLinkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOneTimeLinkRepoMockRecorder
}

// MockOneTimeLinkRepoMockRecorder is the mock recorder for MockOneTimeLinkRepo.
type MockOneTimeLinkRepoMockRecorder struct {
	mock *MockOneTimeLinkRepo
}

// NewMockOneTimeLinkRepo creates a new mock instance.
func NewMockOneTimeLinkRepo(ctrl *gomock.Controller) *MockOneTimeLinkRepo {
	mock := &MockOneTimeLinkRepo{ctrl: ctrl}
	mock.recorder = &MockOneTimeLinkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOneTimeLinkRepo) EXPECT() *MockOneTimeLinkRepoMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockOneTimeLinkRepo) Check(ctx context.Context, link string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, link)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockOneTimeLinkRepoMockRecorder) Check(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockOneTimeLinkRepo)(nil).Check), ctx, link)
}

// Get mocks base method.
func (m *MockOneTimeLinkRepo) Get(ctx context.Context, link string) (entity.OneTimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, link)
	ret0, _ := ret[0].(entity.OneTimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOneTimeLinkRepoMockRecorder) Get(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOneTimeLinkRepo)(nil).Get), ctx, link)
}

// Store mocks base method.
func (m *MockOneTimeLinkRepo) Store(arg0 context.Context, arg1 entity.OneTimeLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockOneTimeLinkRepoMockRecorder) Store(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOneTimeLinkRepo)(nil).Store), arg0, arg1)
}
